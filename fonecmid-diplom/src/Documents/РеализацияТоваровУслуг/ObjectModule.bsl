
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Выполняет автозаполнение табличной части документа
Процедура ВыполнитьАвтозаполнение() Экспорт
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,"ВКМ_ДатаНачалаДействия, ВКМ_ДатаОкончанияДействия");
	
	Если КонецМесяца(ДанныеДоговора.ВКМ_ДатаОкончанияДействия) < КонецМесяца(Дата) Тогда
		ОбщегоНазначения.СообщитьПользователю("Срок договора истек");
		Возврат;
	ИначеЕсли НачалоМесяца(ДанныеДоговора.ВКМ_ДатаНачалаДействия) > НачалоМесяца(Дата) Тогда
		ОбщегоНазначения.СообщитьПользователю("Обслуживание еще не началось");
		Возврат;
	КонецЕсли;
			
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты, 0)) КАК СуммаАбонентскойПлаты,
	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧаса КАК СтоимостьЧаса,
	|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовОборот, 0)) КАК КоличествоЧасов,
	|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеОборот, 0)) КАК СуммаКОплате,
	|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовОборот, 0)) КАК КоличествоЧасовОборот,
	|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеОборот, 0)) КАК СуммаКОплатеОборот
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(&НачалоПериода, &КонецПериода,,) КАК
	|			ВКМ_ВыполненныеКлиентуРаботыОбороты
	|		ПО ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧаса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_НоменклатураАбонентскаяПлата.Значение КАК НоменклатураАбонентскаяПлата,
	|	ВКМ_НоменклатураРаботыСпециалиста.Значение КАК НоменклатураРаботыСпециалиста
	|ИЗ
	|	Константа.ВКМ_НоменклатураАбонентскаяПлата КАК ВКМ_НоменклатураАбонентскаяПлата,
	|	Константа.ВКМ_НоменклатураРаботыСпециалиста КАК ВКМ_НоменклатураРаботыСпециалиста";
	
	Запрос.УстановитьПараметр("Ссылка", Договор);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Выборка = Запрос.ВыполнитьПакет();
	
	ДанныеПоОбслуживанию = Выборка[0].Выбрать();
	ДанныеПоОбслуживанию.Следующий();
	КонстантыОбслуживания = Выборка[1].Выбрать();
	КонстантыОбслуживания.Следующий();
	
	Если Не ЗначениеЗаполнено(КонстантыОбслуживания.НоменклатураАбонентскаяПлата) 
			ИЛИ Не ЗначениеЗаполнено(КонстантыОбслуживания.НоменклатураРаботыСпециалиста) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнены константы абонентской платы и работы специалиста");
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
		
	Если ДанныеПоОбслуживанию.СуммаАбонентскойПлаты <> 0 Тогда
	
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = КонстантыОбслуживания.НоменклатураАбонентскаяПлата;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Цена = ДанныеПоОбслуживанию.СуммаАбонентскойПлаты;
		НоваяСтрока.Сумма = ДанныеПоОбслуживанию.СуммаАбонентскойПлаты;
			
	КонецЕсли;
	
	Если ДанныеПоОбслуживанию.КоличествоЧасовОборот <> 0 Тогда
	
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = КонстантыОбслуживания.НоменклатураРаботыСпециалиста;
		НоваяСтрока.Количество = ДанныеПоОбслуживанию.КоличествоЧасовОборот;
		НоваяСтрока.Цена = ДанныеПоОбслуживанию.СтоимостьЧаса;
		НоваяСтрока.Сумма = ДанныеПоОбслуживанию.СуммаКОплатеОборот;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	//+Пискулин
	//добавление информации по выставленным счетам по абонентскому обслуживанию
	Движения.ВКМ_АктыКОплате.Записывать = Истина;
	
	Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		Для Каждого ТекСтрокаУслуги из Услуги Цикл
			Если ТекСтрокаУслуги.Номенклатура = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить() Тогда
				Движение = Движения.ВКМ_АктыКОплате.Добавить();
				Движение.Период = Дата;
				Движение.Контрагент = Контрагент;
				Движение.Договор = Договор;
				Движение.Номенклатура = ТекСтрокаУслуги.Номенклатура;
				Движение.Сумма = ТекСтрокаУслуги.Сумма;
			КонецЕсли
		КонецЦикла
	КонецЕсли;
	//-Пискулин
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
